#!/usr/bin/env ruby

# Write a minimal ELF binary file. By doing so, this script will show the
# necessary pieces of an ELF binary.

File.open('from-scratch', 'wb') do |f|
  class << f
    def b(*bs)
      bs.each do |b|
        print(b.chr)
      end
    end
  end

## ELF HEADER #################################################################

  f.b 0x7F, 0x45, 0x4C, 0x46 # Magic number
  f.b 0x02 # 64-bit architecture
  f.b 0x01 # Two's complement, little-endian
  f.b 0x01 # Current ELF specification version
  f.b 0x00, 0x00 # "None" OS/ABI, equiv. to UNIX - System-V, default version
  f.b 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Padding until 16 bytes

  f.b 0x02, 0x00 # Static executable
  f.b 0x3E, 0x00 # AMD x86-64
  f.b 0x01, 0x00, 0x00, 0x00 # Current file version

  f.b 0x38, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00 # Entry point
  f.b 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Prog. header tbl start
  f.b 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Sect. header tbl offset

  f.b 0x00, 0x00, 0x00, 0x00 # Flags, none defined by ELF specification
  f.b 0x40, 0x00 # Header size in bytes
  f.b 0x38, 0x00 # Prog. header entry size in bytes - 56 bytes for 64-bit arch
  f.b 0x01, 0x00 # Prog. header number of entries
  f.b 0x40, 0x00 # Sect. header entry size in bytes
  f.b 0x03, 0x00 # Sect. header number of entries
  f.b 0x02, 0x00 # Index of section name string table in section headers

## SECTION HEADERS TABLE ######################################################

  # Section 0: NULL (required)
  f.b 0x00, 0x00, 0x00, 0x00 # Name
  f.b 0x00, 0x00, 0x00, 0x00 # Type - NULL - everything in this header is "0"
  f.b 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Flags
  f.b 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Address
  f.b 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Offset
  f.b 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Size
  f.b 0x00, 0x00, 0x00, 0x00 # Link
  f.b 0x00, 0x00, 0x00, 0x00 # Info
  f.b 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Address align
  f.b 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Entry size

  # Section 1: .text section
  f.b 0x01, 0x00, 0x00, 0x00 # Name
  f.b 0x01, 0x00, 0x00, 0x00 # Type - PROGBITS
  f.b 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Flags - Alloc + exec
  f.b 0x38, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00 # Address
  f.b 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Offset
  f.b 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Size
  f.b 0x00, 0x00, 0x00, 0x00 # Link - none (static binary
  f.b 0x00, 0x00, 0x00, 0x00 # Info - none
  f.b 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Address align
  f.b 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Entry size - N/A

  # Section 2 - Section header string table
  f.b 0x07, 0x00, 0x00, 0x00 # Name
  f.b 0x03, 0x00, 0x00, 0x00 # Type - STRTAB
  f.b 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Flags - N/A
  f.b 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Address - N/A
  f.b 0x46, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Offset
  f.b 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Size
  f.b 0x00, 0x00, 0x00, 0x00 # Link - none
  f.b 0x00, 0x00, 0x00, 0x00 # Info - none
  f.b 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Address align
  f.b 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Entry size - N/A

## PROGRAM HEADERS TABLE ######################################################

  f.b 0x01, 0x00, 0x00, 0x00 # Loadable segment
  f.b 0x05, 0x00, 0x00, 0x00 # Read + execute flags
  f.b 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Section offset in file
  f.b 0x38, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00 # Virt. addr. in mem.
  f.b 0x38, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00 # Phys. addr. in mem.
  f.b 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Section size in file
  f.b 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Section size in mem.
  f.b 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 # Alignment

## PROGRAM CODE (.text SECTION) ###############################################

  # See: http://ref.x86asm.net/coder64.html
  f.b 0x48, 0xC7, 0xC0, 0x3C, 0x00, 0x00, 0x00 # mov  $60, %rax
  f.b 0xbf, 0x2A, 0x00, 0x00, 0x00             # mov  $42, $edi
  f.b 0x0F, 0x05                               # syscall

## SECTION HEADERS STRING TABLE ###############################################

  # The reason for putting this *after* the text is because this section is
  # highly variable in size and not well-aligned to word boundaries (being
  # strings and all). Thus, it's nice to not mess up the alignment of other
  # sections, such as the program code, by placing those sections after the
  # string table.

  f.b 0x00
  f.b 0x2e, 0x74, 0x65, 0x78, 0x74, 0x00 # .text
  f.b 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00 # .shstrtab

end
